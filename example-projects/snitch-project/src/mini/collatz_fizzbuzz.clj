(ns mini.collatz-fizzbuzz
  (:require [clojure.string :as str])
  (:gen-class))

;; Generated by Claude

;; Function to generate the next number in the Collatz sequence
(defn collatz-next
  "Given a number n, return the next number in the Collatz sequence.
   If n is even, return n/2
   If n is odd, return 3n+1"
  [n]
  (if (even? n)
    (/ n 2)
    (+ (* 3 n) 1)))

;; Function to generate the entire Collatz sequence starting from n
(defn collatz-sequence
  "Generate the Collatz sequence starting from number n until reaching 1"
  [n]
  (when (pos-int? n)
    (loop [current n
           sequence [n]]
      (if (= current 1)
        sequence
        (let [next (collatz-next current)]
          (recur next (conj sequence next)))))))

;; FizzBuzz function
(defn fizzbuzz
  "Apply FizzBuzz rules to a number:
   - If divisible by 3, return 'Fizz'
   - If divisible by 5, return 'Buzz'
   - If divisible by both 3 and 5, return 'FizzBuzz'
   - Otherwise return the number as a string"
  [n]
  (cond
    (and (zero? (mod n 3)) (zero? (mod n 5))) "FizzBuzz"
    (zero? (mod n 3)) "Fizz"
    (zero? (mod n 5)) "Buzz"
    :else (str n)))

;; Function to apply FizzBuzz to a Collatz sequence
(defn fizzbuzz-collatz
  "Generate a Collatz sequence starting from n and apply FizzBuzz rules"
  [n]
  (when-let [sequence (collatz-sequence n)]
    (map fizzbuzz sequence)))

;; Main function for CLI usage
(defn -main [& args]
  (if-let [input (first args)]
    (try
      (let [n (Integer/parseInt input)]
        (if (pos-int? n)
          (let [result (fizzbuzz-collatz n)]
            (println (str "Collatz FizzBuzz sequence for " n ":"))
            (println (str/join ", " result)))
          (println "Error: Please enter a positive integer")))
      (catch NumberFormatException _
        (println "Error: Please enter a valid number")))
    (println "Error: Please provide a number as an argument")))

;; For REPL exploration
(comment
  (collatz-next 6)    ;; => 3
  (collatz-next 3)    ;; => 10
  (collatz-sequence 6) ;; => [6 3 10 5 16 8 4 2 1]
  (fizzbuzz 15)       ;; => "FizzBuzz"
  (fizzbuzz 3)        ;; => "Fizz"
  (fizzbuzz 5)        ;; => "Buzz"
  (fizzbuzz 7)        ;; => "7"
  (fizzbuzz-collatz 6) ;; => ["Fizz" "Fizz" "Buzz" "Buzz" "16" "8" "4" "2" "1"]

  ;; Test the main function
  (-main "6"))