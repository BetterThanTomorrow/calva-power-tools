; This is the Calva REPL Window.
; It's just a file, really, with some special treatment from Calva.
; Use it as a REPL input prompt if you like. (When the REPL is connected.)
; TIPS: The keyboard shortcut `ctrl+alt+o r` shows and focuses this window
; Please see https://calva.io/repl-window/ for more info.
; Happy coding! ♥️

; TIPS: As with any Clojure file when the REPL is connected:
; - `alt+enter` evaluates the current top level form.
; - `ctrl+enter` evaluates the current form.
; Special for this file:
; - `alt+up` and `alt+down` traverse up and down the REPL command history
;    when the cursor is after the last contents at the prompt
;
; See also the Calva Inspector: https://calva.io/inspector/

(when-let [requires (resolve 'clojure.main/repl-requires)] (clojure.core/apply clojure.core/require @requires))
clj꞉user꞉> 
; TIPS: You can choose which REPL to use (clj or cljs):
;    *Calva: Toggle REPL connection*
;    (There is a button in the status bar for this)
(require '[cljs.repl :refer [apropos dir doc find-doc print-doc pst source]])
cljs꞉user꞉> 
(re-matches #"^(#\{[[({])" "#{}")
cljs꞉calva-power-tools.tool.dataspex꞉> 
(re-matches #"^(#\{[[({])" "foo")
cljs꞉calva-power-tools.tool.dataspex꞉> 
(re-matches #"^(#\{|[[({])" "#{}")
cljs꞉calva-power-tools.tool.dataspex꞉> 
(re-matches #"^(#\{|[[({])" "")
cljs꞉calva-power-tools.tool.dataspex꞉> 
(re-matches #"^(#\{|[[({])" "")
cljs꞉calva-power-tools.tool.dataspex꞉> 
(re-matches #"^(#\{|[[({])" "f")
cljs꞉calva-power-tools.tool.dataspex꞉> 
(re-find #"^(#\{|[[({])" "f")
cljs꞉calva-power-tools.tool.dataspex꞉> 
(re-matches #"^(#\{|\()" "f")
cljs꞉calva-power-tools.tool.dataspex꞉> 
(re-matches #"\{|\(\[" "f")
cljs꞉calva-power-tools.tool.dataspex꞉> 
(re-matches #"\{|\(\[" "()f")
cljs꞉calva-power-tools.tool.dataspex꞉> 
(re-matches #"\{|\(|\[" "()f")
cljs꞉calva-power-tools.tool.dataspex꞉> 
(re-matches #"\{|\(|\[" "()f")
cljs꞉calva-power-tools.tool.dataspex꞉> 
(re-matches #"\{|\(|\[" "foo")
cljs꞉calva-power-tools.tool.dataspex꞉> 
(re-matches #"\{|\(|\[" "(f)")
cljs꞉calva-power-tools.tool.dataspex꞉> 
(re-matches #"\{|\(|\[.*" "(f)")
cljs꞉calva-power-tools.tool.dataspex꞉> 
(re-find #"[{([\\[]" "(f)")
cljs꞉calva-power-tools.tool.dataspex꞉> 
(re-find #"[{([\\[]" "foo")
cljs꞉calva-power-tools.tool.dataspex꞉> 
(re-find #"\{|\(|\[" "(f)")
cljs꞉calva-power-tools.tool.dataspex꞉> 
(re-find #"\{|\(|\[" "f")
cljs꞉calva-power-tools.tool.dataspex꞉> 
(calva/currentForm)
cljs꞉calva-power-tools.tool.dataspex꞉> 
(defn* get-label-candidate [form]
  (when-not (re-find #"\{|\(|\[" form)
    form))
cljs꞉calva-power-tools.tool.dataspex꞉> 
(clojure.core/require '[snitch.core :refer [defn* defmethod* *fn *let]])
clj꞉user꞉> 
(defn* get-label-candidate [form]
  (when-not (re-find #"\{|\(|\[" form)
    form))
cljs꞉calva-power-tools.tool.dataspex꞉> 
form
cljs꞉calva-power-tools.tool.dataspex꞉> 
(defn* inspect-top-level-form []
  (let [form (second (calva/currentTopLevelForm))
        label (get-label-candidate form)]
    (inspect-form form label)))
cljs꞉calva-power-tools.tool.dataspex꞉> 
(defn* inspect-top-level-form []
  (let [form (second (calva/currentTopLevelForm))
        label (get-label-candidate form)]
    (inspect-form form label)))
cljs꞉calva-power-tools.tool.dataspex꞉> 
(defn* inspect-form [form label-candidate]
  (-> (vscode/window.showInputBox #js {:title "Dataspex Inspect: Panel item name"
                                       :ignoreFocusOut true
                                       :value label-candidate
                                       :placeHolder "Inspected thing"})
      (.then (fn [s]
               (let [snippet {:snippet (str "(require 'dataspex.core) (dataspex.core/inspect\""
                                            (or s "Inspected thing") "\" " form " )")}]
                 (calva/execute-calva-command! "calva.runCustomREPLCommand"
                                               (clj->js snippet)))))))
cljs꞉calva-power-tools.tool.dataspex꞉> 
s
cljs꞉calva-power-tools.tool.dataspex꞉> 
label-candidate
cljs꞉calva-power-tools.tool.dataspex꞉> 
(defn* inspect-form [form label-candidate]
  (-> (vscode/window.showInputBox #js {:title "Dataspex Inspect: Panel item name"
                                       :ignoreFocusOut true
                                       :value label-candidate
                                       :placeHolder "Inspected thing"})
      (.then (fn [s]
               (let [snippet {:snippet (str "(require 'dataspex.core) (dataspex.core/inspect\""
                                            (if (string/blank? s)
                                              "Inspected thing"
                                              s)
                                            "\" " form " )")}]
                 (calva/execute-calva-command! "calva.runCustomREPLCommand"
                                               (clj->js snippet)))))))
cljs꞉calva-power-tools.tool.dataspex꞉> 
(ns calva-power-tools.tool.dataspex
  (:require
   ["vscode" :as vscode]
   [calva-power-tools.calva :as calva]
   [calva-power-tools.extension.db :as db]
   [calva-power-tools.extension.life-cycle-helpers :as lc-helpers]
   [calva-power-tools.util :as util]
   [clojure.string :as string]))
cljs꞉calva-power-tools.tool.dataspex꞉> 
(defn* inspect-form [form label-candidate]
  (-> (vscode/window.showInputBox #js {:title "Dataspex Inspect: Panel item name"
                                       :ignoreFocusOut true
                                       :value label-candidate
                                       :placeHolder "Inspected thing"})
      (.then (fn [s]
               (let [snippet {:snippet (str "(require 'dataspex.core) (dataspex.core/inspect\""
                                            (if (string/blank? s)
                                              "Inspected thing"
                                              s)
                                            "\" " form " )")}]
                 (calva/execute-calva-command! "calva.runCustomREPLCommand"
                                               (clj->js snippet)))))))
cljs꞉calva-power-tools.tool.dataspex꞉> 
