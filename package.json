{
  "name": "calva-power-tools",
  "displayName": "Calva Power Tools",
  "description": "Commands for extra powerful things in the Clojure ecosystem.",
  "version": "0.0.10",
  "publisher": "betterthantomorrow",
  "author": {
    "name": "Better Than Tomorrow",
    "email": "pez@pezius.com"
  },
  "icon": "assets/extension-icon-128x128.png",
  "repository": {
    "type": "git",
    "url": "https://github.com/betterThanTomorrow/calva-power-tools.git"
  },
  "engines": {
    "vscode": ">=1.75.0",
    "node": ">=20.18.0"
  },
  "enabledApiProposals": [
    "extensionRuntime"
  ],
  "categories": [
    "Keymaps",
    "Data Science",
    "Programming Languages"
  ],
  "keywords": [
    "Clojure",
    "Visualization",
    "Data Science",
    "Literate Programming",
    "Calva",
    "REPL",
    "Clay"
  ],
  "activationEvents": [],
  "extensionDependencies": [
    "betterthantomorrow.calva"
  ],
  "main": "out/extension.js",
  "contributes": {
    "views": {
      "calva": [
        {
          "id": "cpt.dataspex.view",
          "name": "Dataspex",
          "type": "webview",
          "icon": "assets/calva-symbol-white.svg",
          "when": ":calva-power-tools/dataspex-panel-active?"
        }
      ]
    },
    "configuration": [
      {
        "type": "object",
        "title": "Calva Power Tools",
        "properties": {
          "cpt.performance.autoOpenProfilerUI": {
            "type": "string",
            "default": "vscode",
            "enum": [
              "vscode",
              "system",
              "never"
            ],
            "enumDescriptions": [
              "Auto-open the Profiler UI in the VS Code internal Simple Browser.",
              "Auto-open the Profiler UI in the system default web browser.",
              "Never auto-open the Profiler UI."
            ],
            "description": "Auto-open the Profiler UI in the specified browser (or not)."
          }
        }
      }
    ],
    "commands": [
      {
        "command": "cpt.showCommands",
        "category": "Calva Power Tools (CPT)",
        "title": "Show Commands"
      },
      {
        "command": "cpt.clay.makeFile",
        "category": "[CPT] Clay",
        "title": "Make File"
      },
      {
        "command": "cpt.clay.makeFileQuarto",
        "category": "[CPT] Clay",
        "title": "Make File Quarto"
      },
      {
        "command": "cpt.clay.makeFileRevealJs",
        "category": "[CPT] Clay",
        "title": "Make File Reveal.js"
      },
      {
        "command": "cpt.clay.makeCurrentForm",
        "category": "[CPT] Clay",
        "title": "Make Current Form"
      },
      {
        "command": "cpt.clay.makeCurrentFormQuarto",
        "category": "[CPT] Clay",
        "title": "Make Current Form Quarto"
      },
      {
        "command": "cpt.clay.makeTopLevelForm",
        "category": "[CPT] Clay",
        "title": "Make Top Level Form"
      },
      {
        "command": "cpt.clay.makeTopLevelFormQuarto",
        "category": "[CPT] Clay",
        "title": "Make Top Level Form Quarto"
      },
      {
        "command": "cpt.clay.browse",
        "category": "[CPT] Clay",
        "title": "Browse"
      },
      {
        "command": "cpt.clay.watch",
        "category": "[CPT] Clay",
        "title": "Watch"
      },
      {
        "command": "cpt.clay.loadClayDependency",
        "category": "[CPT] Clay",
        "title": "Load Clay Dependency",
        "enablement": "false"
      },
      {
        "command": "cpt.deps.loadSelectedDependencies",
        "category": "[CPT] tools-deps",
        "title": "Load Selected Dependencies"
      },
      {
        "command": "cpt.deps.loadDependencies",
        "category": "[CPT] tools-deps",
        "title": "Load Dependencies..."
      },
      {
        "command": "cpt.deps.syncDeps",
        "category": "[CPT] tools-deps",
        "title": "Sync deps.edn dependencies..."
      },
      {
        "command": "cpt.snitch.loadSnitchDependency",
        "category": "[CPT] Snitch",
        "title": "Load Snitch Dependency"
      },
      {
        "command": "cpt.snitch.instrumentTopLevelForm",
        "category": "[CPT] Snitch",
        "title": "Instrument Top Level defn/let/fn"
      },
      {
        "command": "cpt.snitch.instrumentCurrentForm",
        "category": "[CPT] Snitch",
        "title": "Instrument Current Form defn/let/fn"
      },
      {
        "command": "cpt.snitch.getSnitchedDefnResults",
        "category": "[CPT] Snitch",
        "title": "Get Snitched defn Results"
      },
      {
        "command": "cpt.snitch.reconstructLastDefnCallToClipboard",
        "category": "[CPT] Snitch",
        "title": "Reconstruct Last defn Call to Clipboard"
      },
      {
        "command": "cpt.performance.loadDecompilerDependency",
        "category": "[CPT] Performance",
        "title": "Load Decompiler Dependency"
      },
      {
        "command": "cpt.performance.loadCriteriumDependency",
        "category": "[CPT] Performance",
        "title": "Load Criterium Dependency"
      },
      {
        "command": "cpt.performance.loadProfilerDependency",
        "category": "[CPT] Performance",
        "title": "Load Profiler Dependency"
      },
      {
        "command": "cpt.performance.decompileTopLevelForm",
        "category": "[CPT] Performance",
        "title": "Decompile Top Level Form"
      },
      {
        "command": "cpt.performance.decompileTopLevelFormWithUncheckedMath",
        "category": "[CPT] Performance",
        "title": "Decompile Top Level Form With Unchecked Math"
      },
      {
        "command": "cpt.performance.decompileSelection",
        "category": "[CPT] Performance",
        "title": "Decompile Selection"
      },
      {
        "command": "cpt.performance.disassembleTopLevelForm",
        "category": "[CPT] Performance",
        "title": "Disassemble Top Level Form"
      },
      {
        "command": "cpt.performance.quickBenchTopLevelForm",
        "category": "[CPT] Performance",
        "title": "Criterium Quick Bench Top Level Form"
      },
      {
        "command": "cpt.performance.quickBenchCurrentForm",
        "category": "[CPT] Performance",
        "title": "Criterium Quick Bench Current Form"
      },
      {
        "command": "cpt.performance.timeTopLevelForm",
        "category": "[CPT] Performance",
        "title": "Time Top Level Form"
      },
      {
        "command": "cpt.performance.timeCurrentForm",
        "category": "[CPT] Performance",
        "title": "Time Current Form"
      },
      {
        "command": "cpt.performance.profileCurrentForm",
        "category": "[CPT] Performance",
        "title": "Profile Current Form"
      },
      {
        "command": "cpt.performance.profileTopLevelForm",
        "category": "[CPT] Performance",
        "title": "Profile Top Level Form"
      },
      {
        "command": "cpt.performance.startProfilerUI",
        "category": "[CPT] Performance",
        "title": "Start Profiler UI"
      },
      {
        "command": "cpt.dataspex.loadDataspexDependency",
        "category": "[CPT] Dataspex",
        "title": "Load Dataspex Dependency"
      },
      {
        "command": "cpt.dataspex.inspectCurrentForm",
        "category": "[CPT] Dataspex",
        "title": "Inspect Current Form..."
      },
      {
        "command": "cpt.dataspex.inspectTopLevelForm",
        "category": "[CPT] Dataspex",
        "title": "Inspect Top Level Form..."
      },
      {
        "command": "cpt.dataspex.openInspectorInEditorView",
        "category": "[CPT] Dataspex",
        "title": "Open Inspector in Editor"
      },
      {
        "command": "cpt.dataspex.openInspectorPanelView",
        "category": "[CPT] Dataspex",
        "title": "Open Inspector Panel",
        "enablement": "!:calva-power-tools/dataspex-panel-active?"
      }
    ],
    "keybindings": [
      {
        "key": "ctrl+shift+space ctrl+shift+space",
        "command": "cpt.showCommands"
      },
      {
        "key": "ctrl+shift+space ctrl+a",
        "command": "cpt.showCommands",
        "args": "Clay"
      },
      {
        "key": "ctrl+shift+space a f",
        "command": "cpt.clay.makeFile",
        "when": "editorTextFocus && editorLangId == 'clojure'"
      },
      {
        "key": "ctrl+shift+space a q f",
        "command": "cpt.clay.makeFileQuarto",
        "when": "editorTextFocus && editorLangId == 'clojure'"
      },
      {
        "key": "ctrl+shift+space a r f",
        "command": "cpt.clay.makeFileRevealJs",
        "when": "editorTextFocus && editorLangId == 'clojure'"
      },
      {
        "key": "ctrl+shift+space a c",
        "command": "cpt.clay.makeCurrentForm",
        "when": "editorTextFocus && editorLangId == 'clojure'"
      },
      {
        "key": "ctrl+shift+space a q c",
        "command": "cpt.clay.makeCurrentFormQuarto",
        "when": "editorTextFocus && editorLangId == 'clojure'"
      },
      {
        "key": "ctrl+shift+space ctrl+shift+a",
        "command": "cpt.clay.makeTopLevelForm",
        "when": "editorTextFocus && editorLangId == 'clojure'"
      },
      {
        "key": "ctrl+shift+space a a",
        "command": "cpt.clay.makeTopLevelForm",
        "when": "editorTextFocus && editorLangId == 'clojure'"
      },
      {
        "key": "ctrl+shift+space a q a",
        "command": "cpt.clay.makeTopLevelFormQuarto",
        "when": "editorTextFocus && editorLangId == 'clojure'"
      },
      {
        "key": "ctrl+shift+space a b",
        "command": "cpt.clay.browse",
        "when": "editorTextFocus && editorLangId == 'clojure'"
      },
      {
        "key": "ctrl+shift+space a w",
        "command": "cpt.clay.watch",
        "when": "editorTextFocus && editorLangId == 'clojure'"
      },
      {
        "key": "ctrl+shift+space a d",
        "command": "clay.loadClayDependency",
        "when": "false && calva:activated"
      },
      {
        "key": "ctrl+shift+space ctrl+shift+d",
        "command": "cpt.showCommands",
        "args": "tools-deps"
      },
      {
        "key": "ctrl+shift+space d d",
        "command": "cpt.deps.loadDependencies",
        "when": "calva:activated"
      },
      {
        "key": "ctrl+shift+space d ctrl+s",
        "command": "cpt.deps.loadSelectedDependencies",
        "when": "calva:activated && editorHasSelection"
      },
      {
        "key": "ctrl+shift+space d s",
        "command": "cpt.deps.syncDeps",
        "when": "calva:activated"
      },
      {
        "key": "ctrl+shift+space ctrl+shift+s",
        "command": "cpt.showCommands",
        "args": "Snitch"
      },
      {
        "key": "ctrl+shift+space s l",
        "command": "cpt.snitch.loadSnitchDependency",
        "when": "editorTextFocus && editorLangId == 'clojure'"
      },
      {
        "key": "ctrl+shift+space s t",
        "command": "cpt.snitch.instrumentTopLevelForm",
        "when": "editorTextFocus && editorLangId == 'clojure'"
      },
      {
        "key": "ctrl+shift+space s f",
        "command": "cpt.snitch.instrumentCurrentForm",
        "when": "editorTextFocus && editorLangId == 'clojure'"
      },
      {
        "key": "ctrl+shift+space s r",
        "command": "cpt.snitch.getSnitchedDefnResults",
        "when": "editorTextFocus && editorLangId == 'clojure'"
      },
      {
        "key": "ctrl+shift+space s c",
        "command": "cpt.snitch.reconstructLastDefnCallToClipboard",
        "when": "editorTextFocus && editorLangId == 'clojure'"
      },
      {
        "key": "ctrl+shift+space ctrl+shift+p",
        "command": "cpt.showCommands",
        "args": "Performance"
      },
      {
        "key": "ctrl+shift+space p d l",
        "command": "cpt.performance.loadDecompilerDependency",
        "when": "editorTextFocus && editorLangId == 'clojure'"
      },
      {
        "key": "ctrl+shift+space p d t",
        "command": "cpt.performance.decompileTopLevelForm",
        "when": "editorTextFocus && editorLangId == 'clojure'"
      },
      {
        "key": "ctrl+shift+space p d u",
        "command": "cpt.performance.decompileTopLevelFormWithUncheckedMath",
        "when": "editorTextFocus && editorLangId == 'clojure'"
      },
      {
        "key": "ctrl+shift+space p d s",
        "command": "cpt.performance.decompileSelection",
        "when": "editorTextFocus && editorLangId == 'clojure'"
      },
      {
        "key": "ctrl+shift+space p d a",
        "command": "cpt.performance.disassembleTopLevelForm",
        "when": "editorTextFocus && editorLangId == 'clojure'"
      },
      {
        "key": "ctrl+shift+space p c l",
        "command": "cpt.performance.loadCriteriumDependency",
        "when": "editorTextFocus && editorLangId == 'clojure'"
      },
      {
        "key": "ctrl+shift+space p c t",
        "command": "cpt.performance.quickBenchTopLevelForm",
        "when": "editorTextFocus && editorLangId == 'clojure'"
      },
      {
        "key": "ctrl+shift+space p c c",
        "command": "cpt.performance.quickBenchCurrentForm",
        "when": "editorTextFocus && editorLangId == 'clojure'"
      },
      {
        "key": "ctrl+shift+space p t t",
        "command": "cpt.performance.timeTopLevelForm",
        "when": "editorTextFocus && editorLangId == 'clojure'"
      },
      {
        "key": "ctrl+shift+space p t c",
        "command": "cpt.performance.timeCurrentForm",
        "when": "editorTextFocus && editorLangId == 'clojure'"
      },
      {
        "key": "ctrl+shift+space p p l",
        "command": "cpt.performance.loadProfilerDependency",
        "when": "editorTextFocus && editorLangId == 'clojure'"
      },
      {
        "key": "ctrl+shift+space p p t",
        "command": "cpt.performance.profileTopLevelForm",
        "when": "editorTextFocus && editorLangId == 'clojure'"
      },
      {
        "key": "ctrl+shift+space p p c",
        "command": "cpt.performance.profileCurrentForm",
        "when": "editorTextFocus && editorLangId == 'clojure'"
      },
      {
        "key": "ctrl+shift+space p p u",
        "command": "cpt.performance.startProfilerUI",
        "when": "editorTextFocus && editorLangId == 'clojure'"
      },
      {
        "key": "ctrl+shift+space ctrl+shift+x",
        "command": "cpt.showCommands",
        "args": "Dataspex"
      },
      {
        "key": "ctrl+shift+space x l",
        "command": "cpt.dataspex.loadDataspexDependency",
        "when": "editorTextFocus && editorLangId == 'clojure'"
      },
      {
        "key": "ctrl+shift+space x t",
        "command": "cpt.dataspex.inspectTopLevelForm",
        "when": "editorTextFocus && editorLangId == 'clojure'"
      },
      {
        "key": "ctrl+shift+space x c",
        "command": "cpt.dataspex.inspectCurrentForm",
        "when": "editorTextFocus && editorLangId == 'clojure'"
      }
    ]
  },
  "scripts": {
    "clean": "rimraf .cpcache .shadow-cljs/ out/",
    "preclean": "npm install",
    "watch": "clojure -Sdeps '{:deps {nrepl/nrepl {:mvn/version,\"1.3.1\"},cider/cider-nrepl {:mvn/version,\"0.52.1\"}}}' -M -m nrepl.cmdline --middleware \"[cider.nrepl/cider-middleware shadow.cljs.devtools.server.nrepl/middleware]\"",
    "test": "node out/extension-tests.js",
    "pretest": "npm run compile",
    "prewatch": "npm run clean",
    "compile": "npx shadow-cljs compile :extension :test-compile",
    "precompile": "npm run clean",
    "release-test": "node out/extension-tests.js",
    "release": "npx shadow-cljs release :extension :test-compile",
    "package": "npx vsce package --githubBranch master",
    "vscode:prepublish": "npm run clean && npm run release"
  },
  "dependencies": {
    "@vscode/codicons": "^0.0.36"
  },
  "devDependencies": {
    "rimraf": "^6.0.1",
    "shadow-cljs": "2.28.23",
    "@vscode/vsce": "^3.3.2",
    "@vscode/test-electron": "~2.5.2",
    "ovsx": "~0.10.1"
  }
}
